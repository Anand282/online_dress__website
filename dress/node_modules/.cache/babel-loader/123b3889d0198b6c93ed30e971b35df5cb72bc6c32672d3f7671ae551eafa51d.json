{"ast":null,"code":"// frontend/src/features/orderSlice.js\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Fetch orders for the logged-in user\nexport const fetchOrders = createAsyncThunk(\"orders/fetchOrders\", async (_, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await axios.get(\"/api/orders\", {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data.orders;\n});\n\n// Update order status\nexport const updateOrderStatus = createAsyncThunk(\"orders/updateOrderStatus\", async ({\n  orderId,\n  status\n}, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  await axios.put(`/api/orders/${orderId}`, {\n    status\n  }, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return {\n    orderId,\n    status\n  };\n});\nconst orderSlice = createSlice({\n  name: \"orders\",\n  initialState: {\n    orders: [],\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchOrders.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchOrders.fulfilled, (state, action) => {\n      state.loading = false;\n      state.orders = action.payload;\n    }).addCase(fetchOrders.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    }).addCase(updateOrderStatus.fulfilled, (state, action) => {\n      const {\n        orderId,\n        status\n      } = action.payload;\n      const order = state.orders.find(order => order._id === orderId);\n      if (order) {\n        order.status = status;\n      }\n    });\n  }\n});\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchOrders","_","getState","token","auth","response","get","headers","Authorization","data","orders","updateOrderStatus","orderId","status","put","orderSlice","name","initialState","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","order","find","_id","reducer"],"sources":["D:/dresspro/dress/src/features/orderSlice.js"],"sourcesContent":["// frontend/src/features/orderSlice.js\r\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\n// Fetch orders for the logged-in user\r\nexport const fetchOrders = createAsyncThunk(\r\n    \"orders/fetchOrders\",\r\n    async (_, { getState }) => {\r\n        const token = getState().auth.token;\r\n        const response = await axios.get(\"/api/orders\", {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        return response.data.orders;\r\n    }\r\n);\r\n\r\n// Update order status\r\nexport const updateOrderStatus = createAsyncThunk(\r\n    \"orders/updateOrderStatus\",\r\n    async ({ orderId, status }, { getState }) => {\r\n        const token = getState().auth.token;\r\n        await axios.put(`/api/orders/${orderId}`, { status }, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        return { orderId, status };\r\n    }\r\n);\r\n\r\nconst orderSlice = createSlice({\r\n    name: \"orders\",\r\n    initialState: {\r\n        orders: [],\r\n        loading: false,\r\n        error: null,\r\n    },\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchOrders.pending, (state) => {\r\n                state.loading = true;\r\n                state.error = null;\r\n            })\r\n            .addCase(fetchOrders.fulfilled, (state, action) => {\r\n                state.loading = false;\r\n                state.orders = action.payload;\r\n            })\r\n            .addCase(fetchOrders.rejected, (state, action) => {\r\n                state.loading = false;\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(updateOrderStatus.fulfilled, (state, action) => {\r\n                const { orderId, status } = action.payload;\r\n                const order = state.orders.find((order) => order._id === orderId);\r\n                if (order) {\r\n                    order.status = status;\r\n                }\r\n            });\r\n    },\r\n});\r\n\r\nexport default orderSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACvC,oBAAoB,EACpB,OAAOG,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACvB,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,MAAME,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,aAAa,EAAE;IAC5CC,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUL,KAAK;IAAG;EAChD,CAAC,CAAC;EACF,OAAOE,QAAQ,CAACI,IAAI,CAACC,MAAM;AAC/B,CACJ,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGb,gBAAgB,CAC7C,0BAA0B,EAC1B,OAAO;EAAEc,OAAO;EAAEC;AAAO,CAAC,EAAE;EAAEX;AAAS,CAAC,KAAK;EACzC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,MAAMJ,KAAK,CAACe,GAAG,CAAC,eAAeF,OAAO,EAAE,EAAE;IAAEC;EAAO,CAAC,EAAE;IAClDN,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUL,KAAK;IAAG;EAChD,CAAC,CAAC;EACF,OAAO;IAAES,OAAO;IAAEC;EAAO,CAAC;AAC9B,CACJ,CAAC;AAED,MAAME,UAAU,GAAGlB,WAAW,CAAC;EAC3BmB,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACVP,MAAM,EAAE,EAAE;IACVQ,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACvB,WAAW,CAACwB,OAAO,EAAGC,KAAK,IAAK;MACrCA,KAAK,CAACP,OAAO,GAAG,IAAI;MACpBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACDI,OAAO,CAACvB,WAAW,CAAC0B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACf,MAAM,GAAGiB,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC,CACDL,OAAO,CAACvB,WAAW,CAAC6B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACtC,CAAC,CAAC,CACDP,OAAO,CAACZ,iBAAiB,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACrD,MAAM;QAAEf,OAAO;QAAEC;MAAO,CAAC,GAAGc,MAAM,CAACC,OAAO;MAC1C,MAAMG,KAAK,GAAGN,KAAK,CAACf,MAAM,CAACsB,IAAI,CAAED,KAAK,IAAKA,KAAK,CAACE,GAAG,KAAKrB,OAAO,CAAC;MACjE,IAAImB,KAAK,EAAE;QACPA,KAAK,CAAClB,MAAM,GAAGA,MAAM;MACzB;IACJ,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,eAAeE,UAAU,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}